//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\neomi.yehuda\Msc\Compilers\CPQ\src\CPQ\Antlr\CPL.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CPQ {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CPLParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, ADDOP=9, 
		AND=10, BREAK=11, CASE=12, CAST=13, DEFAULT=14, ELSE=15, FLOAT=16, IF=17, 
		INPUT=18, INT=19, OUTPUT=20, MULOP=21, NOT=22, OR=23, RELOP=24, SWITCH=25, 
		WHILE=26, ID=27, NUM=28, DELIMITED_COMMENT=29, WHITESPACES=30, SINGLE_LINE_COMMENT=31, 
		MULTILINE_COMMENT=32, SPACES=33;
	public const int
		RULE_program = 0, RULE_declarations = 1, RULE_declaration = 2, RULE_type = 3, 
		RULE_idlist = 4, RULE_stmt = 5, RULE_assignment_stmt = 6, RULE_input_stmt = 7, 
		RULE_output_stmt = 8, RULE_if_stmt = 9, RULE_while_stmt = 10, RULE_switch_stmt = 11, 
		RULE_caselist = 12, RULE_break_stmt = 13, RULE_stmt_block = 14, RULE_stmtlist = 15, 
		RULE_boolexpr = 16, RULE_boolterm = 17, RULE_boolfactor = 18, RULE_expression = 19, 
		RULE_term = 20, RULE_factor = 21;
	public static readonly string[] ruleNames = {
		"program", "declarations", "declaration", "type", "idlist", "stmt", "assignment_stmt", 
		"input_stmt", "output_stmt", "if_stmt", "while_stmt", "switch_stmt", "caselist", 
		"break_stmt", "stmt_block", "stmtlist", "boolexpr", "boolterm", "boolfactor", 
		"expression", "term", "factor"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "';'", "','", "'='", "'('", "')'", "'{'", "'}'", null, "'&&'", 
		"'break'", "'case'", null, "'default'", "'else'", "'float'", "'if'", "'input'", 
		"'int'", "'output'", null, "'!'", "'||'", null, "'switch'", "'while'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "ADDOP", "AND", 
		"BREAK", "CASE", "CAST", "DEFAULT", "ELSE", "FLOAT", "IF", "INPUT", "INT", 
		"OUTPUT", "MULOP", "NOT", "OR", "RELOP", "SWITCH", "WHILE", "ID", "NUM", 
		"DELIMITED_COMMENT", "WHITESPACES", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", 
		"SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CPL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CPLParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public Stmt_blockContext stmt_block() {
			return GetRuleContext<Stmt_blockContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; declarations(0);
			State = 45; stmt_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		return declarations(0);
	}

	private DeclarationsContext declarations(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		DeclarationsContext _localctx = new DeclarationsContext(_ctx, _parentState);
		DeclarationsContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_declarations, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.Lt(-1);
			State = 52;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarations);
					State = 48;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 49; declaration();
					}
					} 
				}
				State = 54;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public IdlistContext idlist() {
			return GetRuleContext<IdlistContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; idlist(0);
			State = 56; Match(T__0);
			State = 57; type();
			State = 58; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(CPLParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(CPLParser.FLOAT, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			_la = _input.La(1);
			if ( !(_la==FLOAT || _la==INT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdlistContext : ParserRuleContext {
		public IdlistContext idlist() {
			return GetRuleContext<IdlistContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CPLParser.ID, 0); }
		public IdlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterIdlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitIdlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdlistContext idlist() {
		return idlist(0);
	}

	private IdlistContext idlist(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		IdlistContext _localctx = new IdlistContext(_ctx, _parentState);
		IdlistContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_idlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 63; Match(ID);
			}
			_ctx.stop = _input.Lt(-1);
			State = 70;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IdlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_idlist);
					State = 65;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 66; Match(T__2);
					State = 67; Match(ID);
					}
					} 
				}
				State = 72;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public Assignment_stmtContext assignment_stmt() {
			return GetRuleContext<Assignment_stmtContext>(0);
		}
		public Input_stmtContext input_stmt() {
			return GetRuleContext<Input_stmtContext>(0);
		}
		public Output_stmtContext output_stmt() {
			return GetRuleContext<Output_stmtContext>(0);
		}
		public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		public While_stmtContext while_stmt() {
			return GetRuleContext<While_stmtContext>(0);
		}
		public Switch_stmtContext switch_stmt() {
			return GetRuleContext<Switch_stmtContext>(0);
		}
		public Break_stmtContext break_stmt() {
			return GetRuleContext<Break_stmtContext>(0);
		}
		public Stmt_blockContext stmt_block() {
			return GetRuleContext<Stmt_blockContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stmt);
		try {
			State = 81;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; assignment_stmt();
				}
				break;
			case INPUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; input_stmt();
				}
				break;
			case OUTPUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 75; output_stmt();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 76; if_stmt();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 77; while_stmt();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 6);
				{
				State = 78; switch_stmt();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 7);
				{
				State = 79; break_stmt();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 8);
				{
				State = 80; stmt_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_stmtContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CPLParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterAssignment_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitAssignment_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_stmtContext assignment_stmt() {
		Assignment_stmtContext _localctx = new Assignment_stmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_assignment_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(ID);
			State = 84; Match(T__3);
			State = 85; expression(0);
			State = 86; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_stmtContext : ParserRuleContext {
		public ITerminalNode INPUT() { return GetToken(CPLParser.INPUT, 0); }
		public ITerminalNode ID() { return GetToken(CPLParser.ID, 0); }
		public Input_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterInput_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitInput_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Input_stmtContext input_stmt() {
		Input_stmtContext _localctx = new Input_stmtContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_input_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(INPUT);
			State = 89; Match(T__4);
			State = 90; Match(ID);
			State = 91; Match(T__5);
			State = 92; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_stmtContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(CPLParser.OUTPUT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Output_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterOutput_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitOutput_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_stmtContext output_stmt() {
		Output_stmtContext _localctx = new Output_stmtContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_output_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(OUTPUT);
			State = 95; Match(T__4);
			State = 96; expression(0);
			State = 97; Match(T__5);
			State = 98; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(CPLParser.IF, 0); }
		public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(CPLParser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_if_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(IF);
			State = 101; Match(T__4);
			State = 102; boolexpr(0);
			State = 103; Match(T__5);
			State = 104; stmt();
			State = 105; Match(ELSE);
			State = 106; stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_stmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(CPLParser.WHILE, 0); }
		public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public While_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterWhile_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitWhile_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_stmtContext while_stmt() {
		While_stmtContext _localctx = new While_stmtContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_while_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(WHILE);
			State = 109; Match(T__4);
			State = 110; boolexpr(0);
			State = 111; Match(T__5);
			State = 112; stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_stmtContext : ParserRuleContext {
		public ITerminalNode SWITCH() { return GetToken(CPLParser.SWITCH, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaselistContext caselist() {
			return GetRuleContext<CaselistContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(CPLParser.DEFAULT, 0); }
		public StmtlistContext stmtlist() {
			return GetRuleContext<StmtlistContext>(0);
		}
		public Switch_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterSwitch_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitSwitch_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_stmtContext switch_stmt() {
		Switch_stmtContext _localctx = new Switch_stmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_switch_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(SWITCH);
			State = 115; Match(T__4);
			State = 116; expression(0);
			State = 117; Match(T__5);
			State = 118; Match(T__6);
			State = 119; caselist(0);
			State = 120; Match(DEFAULT);
			State = 121; Match(T__0);
			State = 122; stmtlist(0);
			State = 123; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaselistContext : ParserRuleContext {
		public CaselistContext caselist() {
			return GetRuleContext<CaselistContext>(0);
		}
		public ITerminalNode CASE() { return GetToken(CPLParser.CASE, 0); }
		public ITerminalNode NUM() { return GetToken(CPLParser.NUM, 0); }
		public StmtlistContext stmtlist() {
			return GetRuleContext<StmtlistContext>(0);
		}
		public CaselistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caselist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterCaselist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitCaselist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaselist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaselistContext caselist() {
		return caselist(0);
	}

	private CaselistContext caselist(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		CaselistContext _localctx = new CaselistContext(_ctx, _parentState);
		CaselistContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_caselist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.Lt(-1);
			State = 133;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CaselistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_caselist);
					State = 126;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 127; Match(CASE);
					State = 128; Match(NUM);
					State = 129; Match(T__0);
					State = 130; stmtlist(0);
					}
					} 
				}
				State = 135;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Break_stmtContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(CPLParser.BREAK, 0); }
		public Break_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterBreak_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitBreak_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_stmtContext break_stmt() {
		Break_stmtContext _localctx = new Break_stmtContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_break_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(BREAK);
			State = 137; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_blockContext : ParserRuleContext {
		public StmtlistContext stmtlist() {
			return GetRuleContext<StmtlistContext>(0);
		}
		public Stmt_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterStmt_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitStmt_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_blockContext stmt_block() {
		Stmt_blockContext _localctx = new Stmt_blockContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_stmt_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(T__6);
			State = 140; stmtlist(0);
			State = 141; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtlistContext : ParserRuleContext {
		public StmtlistContext stmtlist() {
			return GetRuleContext<StmtlistContext>(0);
		}
		public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public StmtlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterStmtlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitStmtlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtlistContext stmtlist() {
		return stmtlist(0);
	}

	private StmtlistContext stmtlist(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		StmtlistContext _localctx = new StmtlistContext(_ctx, _parentState);
		StmtlistContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_stmtlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.Lt(-1);
			State = 148;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StmtlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_stmtlist);
					State = 144;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 145; stmt();
					}
					} 
				}
				State = 150;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolexprContext : ParserRuleContext {
		public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		public ITerminalNode OR() { return GetToken(CPLParser.OR, 0); }
		public BooltermContext boolterm() {
			return GetRuleContext<BooltermContext>(0);
		}
		public BoolexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolexpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterBoolexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitBoolexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolexprContext boolexpr() {
		return boolexpr(0);
	}

	private BoolexprContext boolexpr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		BoolexprContext _localctx = new BoolexprContext(_ctx, _parentState);
		BoolexprContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_boolexpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 152; boolterm(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 159;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BoolexprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolexpr);
					State = 154;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 155; Match(OR);
					State = 156; boolterm(0);
					}
					} 
				}
				State = 161;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BooltermContext : ParserRuleContext {
		public BooltermContext boolterm() {
			return GetRuleContext<BooltermContext>(0);
		}
		public ITerminalNode AND() { return GetToken(CPLParser.AND, 0); }
		public BoolfactorContext boolfactor() {
			return GetRuleContext<BoolfactorContext>(0);
		}
		public BooltermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolterm; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterBoolterm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitBoolterm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolterm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooltermContext boolterm() {
		return boolterm(0);
	}

	private BooltermContext boolterm(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		BooltermContext _localctx = new BooltermContext(_ctx, _parentState);
		BooltermContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_boolterm, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 163; boolfactor();
			}
			_ctx.stop = _input.Lt(-1);
			State = 170;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BooltermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolterm);
					State = 165;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 166; Match(AND);
					State = 167; boolfactor();
					}
					} 
				}
				State = 172;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolfactorContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(CPLParser.NOT, 0); }
		public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RELOP() { return GetToken(CPLParser.RELOP, 0); }
		public BoolfactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolfactor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterBoolfactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitBoolfactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolfactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolfactorContext boolfactor() {
		BoolfactorContext _localctx = new BoolfactorContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_boolfactor);
		try {
			State = 182;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; Match(NOT);
				State = 174; Match(T__4);
				State = 175; boolexpr(0);
				State = 176; Match(T__5);
				}
				break;
			case T__4:
			case CAST:
			case ID:
			case NUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178; expression(0);
				State = 179; Match(RELOP);
				State = 180; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ADDOP() { return GetToken(CPLParser.ADDOP, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 185; term(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 192;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 187;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 188; Match(ADDOP);
					State = 189; term(0);
					}
					} 
				}
				State = 194;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MULOP() { return GetToken(CPLParser.MULOP, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 196; factor();
			}
			_ctx.stop = _input.Lt(-1);
			State = 203;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 198;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 199; Match(MULOP);
					State = 200; factor();
					}
					} 
				}
				State = 205;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CAST() { return GetToken(CPLParser.CAST, 0); }
		public ITerminalNode ID() { return GetToken(CPLParser.ID, 0); }
		public ITerminalNode NUM() { return GetToken(CPLParser.NUM, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPLListener typedListener = listener as ICPLListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICPLVisitor<TResult> typedVisitor = visitor as ICPLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_factor);
		try {
			State = 217;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206; Match(T__4);
				State = 207; expression(0);
				State = 208; Match(T__5);
				}
				break;
			case CAST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210; Match(CAST);
				State = 211; Match(T__4);
				State = 212; expression(0);
				State = 213; Match(T__5);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 215; Match(ID);
				}
				break;
			case NUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 216; Match(NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return declarations_sempred((DeclarationsContext)_localctx, predIndex);

		case 4: return idlist_sempred((IdlistContext)_localctx, predIndex);

		case 12: return caselist_sempred((CaselistContext)_localctx, predIndex);

		case 15: return stmtlist_sempred((StmtlistContext)_localctx, predIndex);

		case 16: return boolexpr_sempred((BoolexprContext)_localctx, predIndex);

		case 17: return boolterm_sempred((BooltermContext)_localctx, predIndex);

		case 19: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 20: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool declarations_sempred(DeclarationsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool idlist_sempred(IdlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool caselist_sempred(CaselistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool stmtlist_sempred(StmtlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool boolexpr_sempred(BoolexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool boolterm_sempred(BooltermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3#\xDE\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\a\x3\x35"+
		"\n\x3\f\x3\xE\x3\x38\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6G\n\x6\f\x6\xE\x6J\v\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\aT\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\a\xE\x86\n\xE\f\xE\xE\xE\x89\v\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\a\x11\x95\n\x11\f\x11\xE\x11\x98"+
		"\v\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\xA0\n\x12\f\x12"+
		"\xE\x12\xA3\v\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\xAB"+
		"\n\x13\f\x13\xE\x13\xAE\v\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x5\x14\xB9\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\a\x15\xC1\n\x15\f\x15\xE\x15\xC4\v\x15\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\a\x16\xCC\n\x16\f\x16\xE\x16\xCF\v\x16\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5"+
		"\x17\xDC\n\x17\x3\x17\x2\x2\n\x4\n\x1A \"$(*\x18\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2\x2\x3\x4\x2\x12\x12\x15\x15\xDA\x2.\x3"+
		"\x2\x2\x2\x4\x31\x3\x2\x2\x2\x6\x39\x3\x2\x2\x2\b>\x3\x2\x2\x2\n@\x3\x2"+
		"\x2\x2\fS\x3\x2\x2\x2\xEU\x3\x2\x2\x2\x10Z\x3\x2\x2\x2\x12`\x3\x2\x2\x2"+
		"\x14\x66\x3\x2\x2\x2\x16n\x3\x2\x2\x2\x18t\x3\x2\x2\x2\x1A\x7F\x3\x2\x2"+
		"\x2\x1C\x8A\x3\x2\x2\x2\x1E\x8D\x3\x2\x2\x2 \x91\x3\x2\x2\x2\"\x99\x3"+
		"\x2\x2\x2$\xA4\x3\x2\x2\x2&\xB8\x3\x2\x2\x2(\xBA\x3\x2\x2\x2*\xC5\x3\x2"+
		"\x2\x2,\xDB\x3\x2\x2\x2./\x5\x4\x3\x2/\x30\x5\x1E\x10\x2\x30\x3\x3\x2"+
		"\x2\x2\x31\x36\b\x3\x1\x2\x32\x33\f\x4\x2\x2\x33\x35\x5\x6\x4\x2\x34\x32"+
		"\x3\x2\x2\x2\x35\x38\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x36\x37\x3\x2\x2"+
		"\x2\x37\x5\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x39:\x5\n\x6\x2:;\a\x3\x2\x2"+
		";<\x5\b\x5\x2<=\a\x4\x2\x2=\a\x3\x2\x2\x2>?\t\x2\x2\x2?\t\x3\x2\x2\x2"+
		"@\x41\b\x6\x1\x2\x41\x42\a\x1D\x2\x2\x42H\x3\x2\x2\x2\x43\x44\f\x4\x2"+
		"\x2\x44\x45\a\x5\x2\x2\x45G\a\x1D\x2\x2\x46\x43\x3\x2\x2\x2GJ\x3\x2\x2"+
		"\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2I\v\x3\x2\x2\x2JH\x3\x2\x2\x2KT\x5\xE"+
		"\b\x2LT\x5\x10\t\x2MT\x5\x12\n\x2NT\x5\x14\v\x2OT\x5\x16\f\x2PT\x5\x18"+
		"\r\x2QT\x5\x1C\xF\x2RT\x5\x1E\x10\x2SK\x3\x2\x2\x2SL\x3\x2\x2\x2SM\x3"+
		"\x2\x2\x2SN\x3\x2\x2\x2SO\x3\x2\x2\x2SP\x3\x2\x2\x2SQ\x3\x2\x2\x2SR\x3"+
		"\x2\x2\x2T\r\x3\x2\x2\x2UV\a\x1D\x2\x2VW\a\x6\x2\x2WX\x5(\x15\x2XY\a\x4"+
		"\x2\x2Y\xF\x3\x2\x2\x2Z[\a\x14\x2\x2[\\\a\a\x2\x2\\]\a\x1D\x2\x2]^\a\b"+
		"\x2\x2^_\a\x4\x2\x2_\x11\x3\x2\x2\x2`\x61\a\x16\x2\x2\x61\x62\a\a\x2\x2"+
		"\x62\x63\x5(\x15\x2\x63\x64\a\b\x2\x2\x64\x65\a\x4\x2\x2\x65\x13\x3\x2"+
		"\x2\x2\x66g\a\x13\x2\x2gh\a\a\x2\x2hi\x5\"\x12\x2ij\a\b\x2\x2jk\x5\f\a"+
		"\x2kl\a\x11\x2\x2lm\x5\f\a\x2m\x15\x3\x2\x2\x2no\a\x1C\x2\x2op\a\a\x2"+
		"\x2pq\x5\"\x12\x2qr\a\b\x2\x2rs\x5\f\a\x2s\x17\x3\x2\x2\x2tu\a\x1B\x2"+
		"\x2uv\a\a\x2\x2vw\x5(\x15\x2wx\a\b\x2\x2xy\a\t\x2\x2yz\x5\x1A\xE\x2z{"+
		"\a\x10\x2\x2{|\a\x3\x2\x2|}\x5 \x11\x2}~\a\n\x2\x2~\x19\x3\x2\x2\x2\x7F"+
		"\x87\b\xE\x1\x2\x80\x81\f\x4\x2\x2\x81\x82\a\xE\x2\x2\x82\x83\a\x1E\x2"+
		"\x2\x83\x84\a\x3\x2\x2\x84\x86\x5 \x11\x2\x85\x80\x3\x2\x2\x2\x86\x89"+
		"\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x1B\x3\x2\x2"+
		"\x2\x89\x87\x3\x2\x2\x2\x8A\x8B\a\r\x2\x2\x8B\x8C\a\x4\x2\x2\x8C\x1D\x3"+
		"\x2\x2\x2\x8D\x8E\a\t\x2\x2\x8E\x8F\x5 \x11\x2\x8F\x90\a\n\x2\x2\x90\x1F"+
		"\x3\x2\x2\x2\x91\x96\b\x11\x1\x2\x92\x93\f\x4\x2\x2\x93\x95\x5\f\a\x2"+
		"\x94\x92\x3\x2\x2\x2\x95\x98\x3\x2\x2\x2\x96\x94\x3\x2\x2\x2\x96\x97\x3"+
		"\x2\x2\x2\x97!\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x99\x9A\b\x12\x1\x2\x9A"+
		"\x9B\x5$\x13\x2\x9B\xA1\x3\x2\x2\x2\x9C\x9D\f\x4\x2\x2\x9D\x9E\a\x19\x2"+
		"\x2\x9E\xA0\x5$\x13\x2\x9F\x9C\x3\x2\x2\x2\xA0\xA3\x3\x2\x2\x2\xA1\x9F"+
		"\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2#\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2"+
		"\xA4\xA5\b\x13\x1\x2\xA5\xA6\x5&\x14\x2\xA6\xAC\x3\x2\x2\x2\xA7\xA8\f"+
		"\x4\x2\x2\xA8\xA9\a\f\x2\x2\xA9\xAB\x5&\x14\x2\xAA\xA7\x3\x2\x2\x2\xAB"+
		"\xAE\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD%\x3\x2\x2"+
		"\x2\xAE\xAC\x3\x2\x2\x2\xAF\xB0\a\x18\x2\x2\xB0\xB1\a\a\x2\x2\xB1\xB2"+
		"\x5\"\x12\x2\xB2\xB3\a\b\x2\x2\xB3\xB9\x3\x2\x2\x2\xB4\xB5\x5(\x15\x2"+
		"\xB5\xB6\a\x1A\x2\x2\xB6\xB7\x5(\x15\x2\xB7\xB9\x3\x2\x2\x2\xB8\xAF\x3"+
		"\x2\x2\x2\xB8\xB4\x3\x2\x2\x2\xB9\'\x3\x2\x2\x2\xBA\xBB\b\x15\x1\x2\xBB"+
		"\xBC\x5*\x16\x2\xBC\xC2\x3\x2\x2\x2\xBD\xBE\f\x4\x2\x2\xBE\xBF\a\v\x2"+
		"\x2\xBF\xC1\x5*\x16\x2\xC0\xBD\x3\x2\x2\x2\xC1\xC4\x3\x2\x2\x2\xC2\xC0"+
		"\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3)\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2"+
		"\xC5\xC6\b\x16\x1\x2\xC6\xC7\x5,\x17\x2\xC7\xCD\x3\x2\x2\x2\xC8\xC9\f"+
		"\x4\x2\x2\xC9\xCA\a\x17\x2\x2\xCA\xCC\x5,\x17\x2\xCB\xC8\x3\x2\x2\x2\xCC"+
		"\xCF\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE+\x3\x2\x2"+
		"\x2\xCF\xCD\x3\x2\x2\x2\xD0\xD1\a\a\x2\x2\xD1\xD2\x5(\x15\x2\xD2\xD3\a"+
		"\b\x2\x2\xD3\xDC\x3\x2\x2\x2\xD4\xD5\a\xF\x2\x2\xD5\xD6\a\a\x2\x2\xD6"+
		"\xD7\x5(\x15\x2\xD7\xD8\a\b\x2\x2\xD8\xDC\x3\x2\x2\x2\xD9\xDC\a\x1D\x2"+
		"\x2\xDA\xDC\a\x1E\x2\x2\xDB\xD0\x3\x2\x2\x2\xDB\xD4\x3\x2\x2\x2\xDB\xD9"+
		"\x3\x2\x2\x2\xDB\xDA\x3\x2\x2\x2\xDC-\x3\x2\x2\x2\r\x36HS\x87\x96\xA1"+
		"\xAC\xB8\xC2\xCD\xDB";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace CPQ
